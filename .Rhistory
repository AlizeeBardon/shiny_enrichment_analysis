install.packages("shiny")
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
install.packages(c("sourcetools", "shiny"))
install.packages("httpuv")
install.packages("httpuv", type="binary")
install.packages(c("sourcetools", "shiny"))
install.packages("shiny", type="binary")
library(shiny)
runExample("01_hello")
install.packages("shinydashboard")
install.packages("DT")
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_project')
library(shinydashboard)
library(DT)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_project')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_project')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
package installr
install.packages("installr")
library(installr)
install.packages("installr")
install.packages("installr")
library(installr)
install.packages("shiny")
install.packages("plotly")
library(plotly)
detach("package:ggplot2", unload = TRUE)
install.packages("ggplot2")
library(ggplot2)
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
#install.packages("shiny")
#install.packages("shinydashboard")
update.packages()
install.packages("shinythemes")
library(shinythemes)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
install.packages("DT")
library(DT)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
View(mtcars)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp()
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp()
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp()
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
?ggplot
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp()
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
View(iris)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
liste <- c(82.357 , 82.345 , 82.354 , 82.327 , 82.406 , 82.384 , 82.369 , 82.384 , 82.397 , 82.375)
shapiro.test(liste)
Xbar = mean(liste)
Xbar
var(lsite)
var(liste)
S_carre = var(liste)
n=10
sigma_carre_0 = 0.01
Zobs = (n-1) * S_carre / sigma_carre_0
Zobs
alpha = 0.05
Zobs = (n-1) * S_carre / sigma_carre_0
qchisq((1-alpha), df=(n-1))        # 7 degrees of freedom
Chi2 = qchisq((1-alpha), df=(n-1))        # 7 degrees of freedom
Zobs > Chi2
Zobs
Chi2
Chi2 = qchisq(0.95, df=9        # 7 degrees of freedom
Chi2 = qchisq(0.95, df=9 )       # 7 degrees of freedom
Chi2 = qchisq(0.95, df=9)       # 7 degrees of freedom
Chi2
Zobs
sigma_carre_0 = 0.01^2
Zobs = (n-1) * S_carre / sigma_carre_0
Zobs
Zobs > Chi2
dimnames(M) <- list(gender=c("Ori Respi","Ori Cardio-Vasc", "Autre Ori"), party=c("Gros Fumeurs","Fumeurs Legers", "Non Fumeurs"))# entête colonne et ligne
M <- as.table(rbind(c(55, 120, 162), c(49, 388, 315), c(61, 300, 650))) # création d'une table 2 lignes/3 colonnes
dimnames(M) <- list(gender=c("Ori Respi","Ori Cardio-Vasc", "Autre Ori"), party=c("Gros Fumeurs","Fumeurs Legers", "Non Fumeurs"))# entête colonne et ligne
>>>>>>> alizee
(test <- chisq.test(M)) # affichage des résultats du test
dimnames(M)
M
test$expected
Chi2 = qchisq(0.95, df=4)
Chi2
test
liste <- c(-0.5, -0.1, 0.9, 1.0, 1.5, 1.8, 1.9, 3.1, 4.5, 4.8)
shapiro.test(liste) #
Xbar = mean(liste)
mu_0 = 0
S_carre = var(liste)
n =10
Xbar
S_carre
Zobs = sqrt(10) * (Xbar - mu_0) / S_carre
Zobs
qt(0.95, 9)
t = qt(0.95, 9)
Zobs > t
liste <- c(1230, 850, 729, 990, 780, 802, 830, 1010, 812, 750)
Xbar = mean(liste)
tete_chapeau = 1 / Xbar
teta_chapeau = 1 / Xbar
teta_chapeau
n=10
t = qt(0.95)
t = qt(0.95, 10)
t
t = qt(0.05, 10)
t
t = qt(0.95, 10)
IC_inf = (sqrt(n) * teta_chapeau) / (-t * sqrt(n))
IC_inf
IC_sup = (sqrt(n) * teta_chapeau) / (t * sqrt(n))
IC_sup
IC_inf = (sqrt(n) * teta_chapeau) / (-t + sqrt(n))
IC_inf
IC_sup = (sqrt(n) * teta_chapeau) / (t + sqrt(n))
IC_sup
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp()
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/shiny_one')
<<<<<<< HEAD
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
#Install biomaRT package :
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
#Install pathview package :
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview")
# Install clusterProfiler package :
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
organism = "org.Mm.eg.db"
BiocManager::install(organism, character.only = TRUE)
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
install.packages("Bitr")
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
load(system.file("extdata", "resultTable.Rda", package="AnnotationDbi"))
head(resultTable)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
install.packages("select")
install.packages("Select")
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
library(clusterProfiler)
library(biomaRt)
library(pathview)
library(shiny)
library(shinythemes)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(highcharter)
library(DT)
library(ggplot2)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
resultTable <- merge(resultTable, annots, by.x=0, by.y="ENTREZID")
head(resultTable)
head(resultTable)
load(system.file("extdata", "resultTable.Rda", package="AnnotationDbi"))
head(resultTable)
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
annots
columns(org.Hs.eg.db)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME", "GO"), keytype="ENTREZID")
annots
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME", "GO"), keytype="ENTREZID")
annots
load(system.file("extdata", "resultTable.Rda", package="AnnotationDbi"))
head(resultTable)
rownames(resultTable)
resultTable
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME", "GO"), keytype="ENTREZID")
annots
annots <- select(org.Hs.eg.db, keys=rownames(resultTable), columns=c("SYMBOL","GENENAME"), keytype="ENTREZID")
annots
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
head(data)
data <- read.csv("C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple_sbset.csv", header = TRUE, sep = ";")
head(data)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
library(input$espece)
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
organism = org.Mmu.eg.db
organism = "org.Mmu.eg.db"
library("organism")
library("org.Mmu.eg.db")
library(org.Mmu.eg.db)
library(clusterProfiler)
library(biomaRt)
library(pathview)
## Install the library if needed then load it
if(!require("pasilla")){
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
}
## Install the library if needed then load it
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pasilla")
BiocManager::install("clusterProfiler")
BiocManager::install("org.Dm.eg.db")
library("org.Mm.eg.db")
library(pasilla)
## RÃ©sultats de l'analyse diffÃ©rentielle
resOrdered = read.csv(file = "res_DE2.csv", header = T, row.names = 1)
library(clusterProfiler)
## RÃ©sultats de l'analyse diffÃ©rentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = T, row.names = 1)
head(resOrdered)
tail(resOrdered)
resOrdered
################################################################################
load("C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv")
################################################################################
load("C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv")
## RÃ©sultats de l'analyse diffÃ©rentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = T, row.names = 1)
head(resOrdered)
## RÃ©sultats de l'analyse diffÃ©rentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";")
head(resOrdered)
## RÃ©sultats de l'analyse diffÃ©rentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
head(resOrdered)
tail(resOrdered)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList = rownames(resOrdered[which(resOrdered$padj<=0.05),])
GeneList
GeneList = data.frame(Gene = GeneList)
head(GeneList)
tail(GeneList)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList = rownames(resOrdered[which(resOrdered$padj<=0.05),])
head(GeneList)
head(resOrdered)
GeneList = data.frame(GeneName = GeneList)
head(GeneList)
GeneList = data.frame(Gene = GeneList)
GeneList = data.frame(Gene = GeneList)
head(GeneList)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList = rownames(resOrdered[which(resOrdered$padj<=0.05),])
head(GeneList)
GeneList = data.frame(Gene = GeneList)
head(GeneList)
GeneList = data.frame(GeneList = GeneName)
GeneList = data.frame(Gene = GeneList)
head(GeneList)
tail(GeneList)
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = rownames(resOrdered)
GeneRef = bitr(genes, fromType="FLYBASE", toType="GO", OrgDb="org.Dm.eg.db")
GeneRef = bitr(genes, fromType="FLYBASE", toType="GO", OrgDb="org.Mm.eg.db")
genes
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = rownames(resOrdered)
GeneRef = bitr(genes, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = rownames(resOrdered)
genes
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = resOrdered$GeneName
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = resOrdered$GeneName
GeneRef = bitr(genes, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
#generef = bitr(gene_list, fromType = "SYMBOL", toType= "GO", OrgDb=organism)
head(GeneRef)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList = resOrdered$GeneName[which(resOrdered$padj<=0.05),]
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList = resOrdered[which(resOrdered$padj<=0.05),]
GeneList
GeneList = GeneList$GeneName
head(GeneList)
GeneList = data.frame(Gene = GeneList)
head(GeneList)
tail(GeneList)
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
genes = resOrdered$GeneName
GeneRef = bitr(genes, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
#generef = bitr(gene_list, fromType = "SYMBOL", toType= "GO", OrgDb=organism)
head(GeneRef)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList$GeneName
head(GeneList)
GeneList_interest = data.frame(Gene = GeneList)
View(GeneRef)
erest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList$GeneName
head(GeneList_interest)
GeneList_interest = data.frame(Gene = GeneList)
head(GeneList_interest)
tail(GeneList_interest)
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
GeneList_all = resOrdered$GeneName
GeneList_all = data.frame(Gene = GeneList_all)
GeneRef_all = bitr(genes, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
#generef = bitr(gene_list, fromType = "SYMBOL", toType= "GO", OrgDb=organism)
head(GeneRef
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList$GeneName
head(GeneList_interest)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList_interest$GeneName
head(GeneList_interest)
GeneList_interest = data.frame(Gene = GeneList)
GeneList_interest = data.frame(Gene = GeneList_interest)
head(GeneList_interest)
tail(GeneList_interest)
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
GeneList_all = resOrdered$GeneName
GeneList_all = data.frame(Gene = GeneList_all)
GeneRef_all = bitr(GeneList_all, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
GeneList_all = resOrdered$GeneName
GeneRef_all = bitr(GeneList_all, fromType="SYMBOL", toType="GO", OrgDb="org.Mm.eg.db")
#generef = bitr(gene_list, fromType = "SYMBOL", toType= "GO", OrgDb=organism)
head(GeneRef_all)
##################
## Préparation des données pour l'enrichissement
##################
get_Gene_and_Bg_ratio = function(GeneList_interest, GeneRef_all) {
### Urne (Liste de rÃ©fÃ©rence)
## m : nb de gÃ¨nes annotÃ©s dans la liste de rÃ©fÃ©rence (= pour chaque terme, cb de gÃ¨nes partagent ce terme)
m = table(GeneRef$GO)
## n : nb de gÃ¨nes non annotÃ©s dans la liste de rÃ©fÃ©rence
n = length(unique(GeneRef$GO)) - m
### CORRECTION #####################
# ici, on veut connaitre le nb de gÃ¨nes non annotÃ©s pour chaque terme
# i.e. le nombre de gÃ¨nes dans la liste - le nb de gÃ¨nes annotÃ©s pour chaque terme
n = length(unique(GeneRef$FLYBASE)) - m
### Experience (Liste d'intÃ©rÃªt)
## x : nb de gÃ¨nes annotÃ©s dans la liste d'intÃ©rÃªt
# ne pas oublier de compter ceux avec comptage nul
experience = merge(GeneList, GeneRef, by.x = "Gene", by.y = "FLYBASE") # Je ne sais pas quoi mettre Ã  cette Ã©tape ...
x = rep(1, length(m)) # Car chaque gÃ¨ne est comptÃ© qu'une fois non ?
### CORRECTION #####################
# Ã cette Ã©tape, on veut faire la mÃªme chose que pour m mais avec la liste d'intÃ©rÃªt
# CrÃ©ation de la liste d'intÃ©rÃªt -> table expÃ©rience (on a seulement gardÃ© les gÃ¨nes avec pval<0.05)
# on Ã©crit donc la mÃªme chose que pour m avec table
# mais comme je l'ai dit en remarque parfois y a des termes GO oÃ¹ aucun des gÃ¨nes de notre liste d'intÃ©rÃªt appartient
# donc il faut prendre en compte les zÃ©ros et pour cela on utilise nos termes de la liste de rÃ©f
x = table(factor(experience$GO, rownames(m)))
## k : nb de gÃ¨nes dans la liste d'intÃ©rÃªt
k = rep(length(GeneList$Gene), length(m)) # Create vector of 6741 values = 771
### CORRECTION #####################
# ici, il suffit juste de compter le nombre de gÃ¨nes dans notre liste d'intÃ©rÃªt
k = length(unique(GeneList$Gene))
Term = unique(GeneRef$GO)
x = as.numeric(x)
m = as.numeric(m)
k = as.numeric(k)
n = as.numeric(n)
# La longueur des vecteurs doit Ãªtre de la longueur de GeneRef ou GeneList ?
return(list(Term = Term, x = x, k = k,
m = m, n = n))
}
Gene.Bg.ratio = get_Gene_and_Bg_ratio(GeneList = GeneList_interest, GeneRef = GeneRef_all)
library(pasilla)
library("org.Mm.eg.db")
library(clusterProfiler)
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
head(resOrdered)
tail(resOrdered)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList_interest$ID
GeneList_interest = data.frame(Gene = GeneList_interest)
head(GeneList_interest)
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";", row.names = 1) %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, row.names = 1, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
head(resOrdered)
tail(resOrdered)
GeneList = rownames(resOrdered[which(resOrdered$padj<=0.05),])
GeneList_interest
head(GeneList_interest)
GeneList
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, row.names = 1, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
## Resultats de l'analyse differentielle
resOrdered = read.csv(file = "C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/exemple.csv", header = TRUE, sep = ";") %>%
mutate(
minusLog10Pvalue = -log10(padj)
)
head(resOrdered)
tail(resOrdered)
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
## Récupérer la liste d'intérêt
# (Notre liste d'intérêt va contenir les gènes considérés DE au seuil \alpha = 0.05)
GeneList_interest = resOrdered[which(resOrdered$padj<=0.05),]
GeneList_interest = GeneList_interest$ID
GeneList_interest = data.frame(Gene = GeneList_interest)
head(GeneList_interest)
## Récupérer l'annotation de l'ensemble des gènes de l'expérience
GeneList_all = resOrdered$ID
GeneRef_all = bitr(GeneList_all, fromType="ENSEMBL", toType="GO", OrgDb="org.Mm.eg.db")
head(GeneRef_all)
##################
## Préparation des données pour l'enrichissement
##################
get_Gene_and_Bg_ratio = function(GeneList, GeneRef) {
### Urne (Liste de reference)
## m : nb de genes annotes dans la liste de reference (= pour chaque terme, cb de genes partagent ce terme)
m = table(GeneRef$GO)
## n : nb de genes non annotes dans la liste de reference
n = length(unique(GeneRef$GO)) - m
### CORRECTION #####################
# ici, on veut connaitre le nb de genes non annotes pour chaque terme
# i.e. le nombre de genes dans la liste - le nb de genes annotes pour chaque terme
n = length(unique(GeneRef$FLYBASE)) - m
### Experience (Liste d'interet)
## x : nb de genes annotes dans la liste d'interet
# ne pas oublier de compter ceux avec comptage nul
experience = merge(GeneList, GeneRef, by.x = "Gene", by.y = "ENSEMBL") # Je ne sais pas quoi mettre a cette etape ...
x = rep(1, length(m)) # Car chaque gene est compte qu'une fois non ?
### CORRECTION #####################
# Ã cette etape, on veut faire la meme chose que pour m mais avec la liste d'interet
# Creation de la liste d'interet -> table experience (on a seulement garde les genes avec pval<0.05)
# on ecrit donc la meme chose que pour m avec table
# mais comme je l'ai dit en remarque parfois y a des termes GO oÃ¹ aucun des genes de notre liste d'interet appartient
# donc il faut prendre en compte les zeros et pour cela on utilise nos termes de la liste de ref
x = table(factor(experience$GO, rownames(m)))
## k : nb de genes dans la liste d'interet
k = rep(length(GeneList$Gene), length(m)) # Create vector of 6741 values = 771
### CORRECTION #####################
# ici, il suffit juste de compter le nombre de genes dans notre liste d'interet
k = length(unique(GeneList$Gene))
Term = unique(GeneRef$GO)
x = as.numeric(x)
m = as.numeric(m)
k = as.numeric(k)
n = as.numeric(n)
# La longueur des vecteurs doit etre de la longueur de GeneRef ou GeneList ?
return(list(Term = Term, x = x, k = k,
m = m, n = n))
}
### Urne (Liste de référence)
## m : nb de gènes annotés dans la liste de référence (= pour chaque terme, cb de gènes partagent ce terme)
m = table(GeneRef$GO)
m
organism = "org.Mm.eg.db"
BiocManager::install(organism, character.only = TRUE)
organism <- input$espece
shiny::runApp('C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis')
setwd("C:/Users/User/Desktop/M2_BIMS_2021_2022/shiny/git/shiny_enrichment_analysis")
shiny::runApp()
runApp()
runApp()
